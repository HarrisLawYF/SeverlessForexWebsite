{"version":3,"sources":["logo.jpg","App.js","serviceWorker.js","config.js","index.js"],"names":["module","exports","Bounce","styled","div","keyframes","bounce","SlideInLeft","fadeInLeft","SlideInUp","fadeInUp","App","props","state","forex","eur_usd","eur_jpy","usd_jpy","usd_eur","jpy_usd","jpy_eur","forex_path","forex_value","this","getForex","forex_object","final_path","map","path","i","path_string","value","substring","length","setState","banks","edges","rate","final_value","alert","API","get","className","src","logo","alt","Component","Boolean","window","location","hostname","match","REGION","URL","Amplify","configure","endpoints","name","endpoint","config","region","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b1bad6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1899df75.jpg\";","import React, { Component } from \"react\";\nimport logo from './logo.jpg';\nimport './App.css';\nimport { bounce, fadeInLeft, fadeInUp } from 'react-animations';\nimport styled, { keyframes } from \"styled-components\";\nimport { API } from \"aws-amplify\";\n\nconst Bounce = styled.div`\n  animation: infinite 5s ${keyframes`${bounce}`};\n`;\nconst SlideInLeft = styled.div`\n  animation: 5s ${keyframes`${fadeInLeft}`};\n`;\nconst SlideInUp = styled.div`\n  animation: 5s ${keyframes`${fadeInUp}`};\n`;\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            forex: null,\n            eur_usd: 0,\n            eur_jpy: 0,\n            usd_jpy: 0,\n            usd_eur: 0,\n            jpy_usd: 0,\n            jpy_eur: 0,\n            forex_path: [],\n            forex_value: []\n        };\n    }\n\n    async componentDidMount() {\n        try {\n            const forex_object = await this.getForex();\n            forex_object.final_path.map(\n                (path, i) =>{\n\n                }\n            );\n            forex_object.final_path = forex_object.final_path.map(function(path) {\n                var path_string=\"\";\n\n                path.map(function(value){\n                   if(value == 0){\n                       value = \"EUR ->\"\n                   } else if (value == 1){\n                       value = \"USD ->\";\n                   } else{\n                       value = \"JPY ->\";\n                   }\n                   path_string+=value;\n                });\n                path_string = path_string.substring(0, path_string.length - 3);\n                return path_string;\n            });\n            this.setState({\n                forex:forex_object.banks,\n                eur_usd: forex_object.edges[0].rate,\n                eur_jpy: forex_object.edges[1].rate,\n                usd_jpy: forex_object.edges[2].rate,\n                usd_eur: forex_object.edges[3].rate,\n                jpy_usd: forex_object.edges[4].rate,\n                jpy_eur: forex_object.edges[5].rate,\n                forex_path: forex_object.final_path,\n                forex_value: forex_object.final_value\n            });\n        } catch (e) {\n            alert(e);\n        }\n    }\n\n    getForex() {\n        return API.get(\"forex\", \"forex\");\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"top-panel\">\n                        <div className=\"side-panel\">\n                            <SlideInLeft>\n                                <table>\n                                    <tbody>\n                                    <tr>\n                                        <th>Currency Reference</th>\n                                    </tr>\n                                    <tr>\n                                        <td>1 EUR = {this.state.eur_usd} USD</td>\n                                    </tr>\n                                    <tr>\n                                        <td>1 EUR = {this.state.eur_jpy} JPY</td>\n                                    </tr>\n                                    <tr>\n                                        <td>1 USD = {this.state.usd_jpy} JPY</td>\n                                    </tr>\n                                    <tr>\n                                        <td>1 USD = {this.state.usd_eur} EUR</td>\n                                    </tr>\n                                    <tr>\n                                        <td>1 JPY = {this.state.jpy_usd} USD</td>\n                                    </tr>\n                                    <tr>\n                                        <td>1 JPY = {this.state.jpy_eur} EUR</td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            </SlideInLeft>\n                        </div>\n                        <div>\n                            <Bounce><img src={logo} className=\"App-logo\" alt=\"logo\"/></Bounce>\n                            <p>\n                                Let's find the way to maximize your money\n                            </p>\n                        </div>\n                        <div className=\"side-panel\">\n                            <p>You can get profit from this arbitrage opportunity money transfer.</p>\n                        </div>\n                    </div>\n                    <div>\n                        <SlideInUp>\n                            <table>\n                                <tbody>\n                                <tr>\n                                    <th>Maximize your money transfer</th>\n                                    <th>Your final money</th>\n                                </tr>\n                                <tr>\n                                    <td className=\"value-left\">{this.state.forex_path!=null&&this.state.forex_path.length>0 ? this.state.forex_path[0]:\"N/A\"}</td>\n                                    <td className=\"value-right\">{this.state.forex_value[0]} EUR</td>\n                                </tr>\n                                <tr>\n                                    <td className=\"value-left\">{this.state.forex_path!=null&&this.state.forex_path.length>0 ? this.state.forex_path[1]:\"N/A\"}</td>\n                                    <td className=\"value-right\">{this.state.forex_value[1]} USD</td>\n                                </tr>\n                                <tr>\n                                    <td className=\"value-left\">{this.state.forex_path!=null&&this.state.forex_path.length>0 ? this.state.forex_path[2]:\"N/A\"}</td>\n                                    <td className=\"value-right\">{this.state.forex_value[2]} JPY</td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </SlideInUp>\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export default {\r\n    apiGateway: {\r\n        REGION: \"us-east-1\",\r\n        URL: \"https://bp23zm05cb.execute-api.us-east-1.amazonaws.com/prod/\"\r\n    }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from \"aws-amplify\";\nimport config from \"./config\";\n\nAmplify.configure({\n    API: {\n        endpoints: [\n            {\n                name: \"forex\",\n                endpoint: config.apiGateway.URL,\n                region: config.apiGateway.REGION\n            },\n        ]\n    }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}