{"ast":null,"code":"import \"source-map-support/register\";\nimport { success, failure } from \"../libs/response-lib\";\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\nimport { currency_data } from \"../resources/currency.json\"; //import { getCurrencyRates } from \"../libs/currency-data\";\n\nexport async function main(event, content, callback) {\n  //const data = JSON.parse(event.body);\n  try {\n    //TODO: call currency API (set USD as the main currency)\n    //TODO: attach original value of the currency exchange\n    //var data = await getCurrencyRates(\"USD\", \"AUD\");\n    //console.log(data);\n    //data = await getCurrencyRates(\"SGD\", \"MYR\");\n    //console.log(data);\n    //console.log(\"-----------------------------\");\n    var graph = {\n      edges: [],\n      banks: 0,\n      rates: 0,\n      create: function () {\n        for (var i = 0; i < this.rates; i++) {\n          // Initialize the graph with empty nodes\n          var new_edge = {\n            src_bank: 0,\n            dest_bank: 0\n          };\n          this.edges.push(new_edge);\n        }\n\n        return this;\n      }\n    };\n    var body = {};\n    body.total_currencies = 3;\n    body.total_rates = 6;\n    body.currencies = currency_data;\n    console.log(body);\n    var result = await calculateMaximumProfit(body);\n    return success(result);\n  } catch (e) {\n    console.log(e);\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\events\\get.js"],"names":["success","failure","calculateMaximumProfit","currency_data","main","event","content","callback","graph","edges","banks","rates","create","i","new_edge","src_bank","dest_bank","push","body","total_currencies","total_rates","currencies","console","log","result","e","status"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,OAAlB,QAAiC,sBAAjC;AACA,SAASC,sBAAT,QAAuC,0BAAvC;AACA,SAASC,aAAT,QAA8B,4BAA9B,C,CACA;;AACA,OAAO,eAAeC,IAAf,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoCC,QAApC,EAA6C;AAChD;AAGA,MAAG;AACC;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA,QAAIC,KAAK,GAAG;AACRC,MAAAA,KAAK,EAAC,EADE;AAERC,MAAAA,KAAK,EAAE,CAFC;AAGRC,MAAAA,KAAK,EAAE,CAHC;AAIRC,MAAAA,MAAM,EAAE,YAAU;AACd,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,KAAzB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC;AACA,cAAIC,QAAQ,GAAG;AAACC,YAAAA,QAAQ,EAAC,CAAV;AAAYC,YAAAA,SAAS,EAAC;AAAtB,WAAf;AACA,eAAKP,KAAL,CAAWQ,IAAX,CAAgBH,QAAhB;AACH;;AACD,eAAO,IAAP;AACH;AAXO,KAAZ;AAaA,QAAII,IAAI,GAAG,EAAX;AACAA,IAAAA,IAAI,CAACC,gBAAL,GAAwB,CAAxB;AACAD,IAAAA,IAAI,CAACE,WAAL,GAAmB,CAAnB;AACAF,IAAAA,IAAI,CAACG,UAAL,GAAkBlB,aAAlB;AACAmB,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,QAAIM,MAAM,GAAG,MAAMtB,sBAAsB,CAACgB,IAAD,CAAzC;AACA,WAAOlB,OAAO,CAACwB,MAAD,CAAd;AACH,GA9BD,CA8BE,OAAOC,CAAP,EAAS;AACPH,IAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACA,WAAOxB,OAAO,CAAC;AAACyB,MAAAA,MAAM,EAAC;AAAR,KAAD,CAAd;AACH;AACJ","sourcesContent":["import { success, failure } from \"../libs/response-lib\";\r\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\r\nimport { currency_data } from \"../resources/currency.json\";\r\n//import { getCurrencyRates } from \"../libs/currency-data\";\r\nexport async function main(event, content, callback){\r\n    //const data = JSON.parse(event.body);\r\n\r\n\r\n    try{\r\n        //TODO: call currency API (set USD as the main currency)\r\n        //TODO: attach original value of the currency exchange\r\n\r\n        //var data = await getCurrencyRates(\"USD\", \"AUD\");\r\n        //console.log(data);\r\n        //data = await getCurrencyRates(\"SGD\", \"MYR\");\r\n        //console.log(data);\r\n        //console.log(\"-----------------------------\");\r\n\r\n        var graph = {\r\n            edges:[],\r\n            banks: 0,\r\n            rates: 0,\r\n            create: function(){\r\n                for (var i = 0; i < this.rates; i++) {\r\n                    // Initialize the graph with empty nodes\r\n                    var new_edge = {src_bank:0,dest_bank:0};\r\n                    this.edges.push(new_edge);\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n        var body = {};\r\n        body.total_currencies = 3;\r\n        body.total_rates = 6;\r\n        body.currencies = currency_data;\r\n        console.log(body);\r\n        var result = await calculateMaximumProfit(body);\r\n        return success(result);\r\n    } catch (e){\r\n        console.log(e);\r\n        return failure({status:false});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}