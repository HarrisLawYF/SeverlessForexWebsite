{"ast":null,"code":"import \"source-map-support/register\";\nexport async function calculateMaximumProfit(body) {\n  const promise = new Promise(function (resolve, reject) {\n    var result = buildCurrencyGraph(body);\n\n    if (result.length > 0) {\n      resolve(result);\n    } else {\n      reject(\"Maximum profit not calculated\");\n    }\n  });\n  return promise;\n}\nvar min = -9999999; //This is like a virtual class\n\nvar edge = {\n  id: 0,\n  src_bank: 0,\n  dest_bank: 0,\n  rate: 0,\n  extra_cost: 0\n}; //This is like a virtual class\n\nvar graph = {\n  edges: [],\n  banks: 0,\n  rates: 0,\n  create: function () {\n    for (var i = 0; i < this.rates; i++) {\n      // Initialize the graph with empty nodes\n      var new_edge = {\n        src_bank: 0,\n        dest_bank: 0\n      };\n      this.edges.push(new_edge);\n    }\n\n    return this;\n  }\n};\n\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost) {\n  var result = local_currency * rate;\n  result = result * ((100 - extra_cost) / 100);\n  return result;\n}\n\nfunction Forex(graph, src_bank) {\n  var V = graph.banks,\n      E = graph.rates;\n  var dist = [];\n  var bridges = []; // Step 1: Initialize distances from src to all other vertices as INFINITE negative\n\n  for (var i = 0; i < V; ++i) {\n    dist[i] = min;\n    bridges[i] = [src_bank];\n  } //Start with 1 dollar\n\n\n  dist[src_bank] = 1;\n\n  for (var i = 1; i < 10; ++i) {\n    for (var j = 0; j < E; ++j) {\n      var u = graph.edges[j].src_bank;\n      var v = graph.edges[j].dest_bank;\n      var extra_cost = graph.edges[j].extra_cost;\n      var rate = graph.edges[j].rate;\n      var bridge_id = graph.edges[j].id;\n      var result = calculateMoneyWithCurrencyRate(dist[u], rate, extra_cost);\n\n      if (dist[u] != min && result > dist[v]) {\n        dist[v] = result;\n        var new_route = bridges[u].slice(0);\n        bridges[v] = new_route;\n        bridges[v].push(v);\n      }\n    }\n  }\n\n  printArr(dist, bridges, V);\n  return {\n    dist,\n    bridges\n  };\n} // A utility function used to print the solution\n\n\nfunction printArr(dist, bridges, V) {\n  console.log(\"Vertex Distance from Source\");\n\n  for (var i = 0; i < V; ++i) {\n    console.log(i + \"\\t\\t\" + dist[i]);\n    console.log(bridges[i]);\n    console.log(\"--------------\");\n  }\n}\n\nfunction buildCurrencyGraph(data) {\n  var new_graph = {\n    edges: [],\n    banks: data.total_currencies,\n    rates: data.total_rates\n  };\n  new_graph = graph.create.call(new_graph);\n\n  for (var count = 0; count < data.total_rates; count++) {\n    new_graph.edges[count].id = count;\n    new_graph.edges[count].src_bank = data.currencies[count].src_id;\n    new_graph.edges[count].dest_bank = data.currencies[count].dest_id;\n    new_graph.edges[count].rate = data.currencies[count].rate;\n    new_graph.edges[count].extra_cost = 0;\n  }\n\n  return Forex(new_graph, 0);\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\libs\\bellman-ford-lib.js"],"names":["calculateMaximumProfit","body","promise","Promise","resolve","reject","result","buildCurrencyGraph","length","min","edge","id","src_bank","dest_bank","rate","extra_cost","graph","edges","banks","rates","create","i","new_edge","push","calculateMoneyWithCurrencyRate","local_currency","Forex","V","E","dist","bridges","j","u","v","bridge_id","new_route","slice","printArr","console","log","data","new_graph","total_currencies","total_rates","call","count","currencies","src_id","dest_id"],"mappings":"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","sourcesContent":["export async function calculateMaximumProfit(body) {\r\n    const promise = new Promise(function(resolve, reject) {\r\n        var result = buildCurrencyGraph(body);\r\n        if(result.length > 0){\r\n            resolve(result);\r\n        } else{\r\n            reject(\"Maximum profit not calculated\");\r\n        }\r\n    });\r\n    return promise;\r\n}\r\n\r\n\r\nvar min = -9999999;\r\n\r\n//This is like a virtual class\r\nvar edge = {\r\n    id: 0,\r\n    src_bank: 0,\r\n    dest_bank: 0,\r\n    rate: 0,\r\n    extra_cost: 0\r\n};\r\n\r\n//This is like a virtual class\r\nvar graph = {\r\n    edges:[],\r\n    banks: 0,\r\n    rates: 0,\r\n    create: function(){\r\n        for (var i = 0; i < this.rates; i++) {\r\n            // Initialize the graph with empty nodes\r\n            var new_edge = {src_bank:0,dest_bank:0};\r\n            this.edges.push(new_edge);\r\n        }\r\n        return this;\r\n    },\r\n};\r\n\r\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost){\r\n    var result = local_currency * rate;\r\n    result = result*((100-extra_cost)/100);\r\n    return result;\r\n}\r\n\r\nfunction Forex(graph, src_bank)\r\n{\r\n    var V = graph.banks, E = graph.rates;\r\n    var dist = [];\r\n    var bridges = [];\r\n\r\n    // Step 1: Initialize distances from src to all other vertices as INFINITE negative\r\n    for (var i = 0; i < V; ++i){\r\n        dist[i] = min;\r\n        bridges[i] = [src_bank];\r\n    }\r\n\r\n    //Start with 1 dollar\r\n    dist[src_bank] = 1;\r\n\r\n    for (var i = 1; i < 10; ++i) {\r\n        for (var j = 0; j < E; ++j) {\r\n            var u = graph.edges[j].src_bank;\r\n            var v = graph.edges[j].dest_bank;\r\n            var extra_cost = graph.edges[j].extra_cost;\r\n            var rate = graph.edges[j].rate;\r\n            var bridge_id = graph.edges[j].id;\r\n            var result = calculateMoneyWithCurrencyRate(dist[u],rate,extra_cost);\r\n            if (dist[u] != min && result > dist[v]){\r\n                dist[v] = result;\r\n                var new_route = bridges[u].slice(0);\r\n                bridges[v] = new_route;\r\n                bridges[v].push(v);\r\n            }\r\n        }\r\n    }\r\n    printArr(dist, bridges, V);\r\n    return {dist, bridges};\r\n}\r\n\r\n// A utility function used to print the solution\r\nfunction printArr(dist, bridges, V)\r\n{\r\n    console.log(\"Vertex Distance from Source\");\r\n    for (var i = 0; i < V; ++i){\r\n        console.log(i + \"\\t\\t\" + dist[i]);\r\n        console.log(bridges[i]);\r\n        console.log(\"--------------\");\r\n    }\r\n\r\n}\r\n\r\nfunction buildCurrencyGraph(data){\r\n    var new_graph = {edges:[],banks:data.total_currencies,rates:data.total_rates};\r\n    new_graph = graph.create.call(new_graph);\r\n    for(var count = 0; count < data.total_rates; count++){\r\n        new_graph.edges[count].id = count;\r\n        new_graph.edges[count].src_bank = data.currencies[count].src_id;\r\n        new_graph.edges[count].dest_bank = data.currencies[count].dest_id;\r\n        new_graph.edges[count].rate = data.currencies[count].rate;\r\n        new_graph.edges[count].extra_cost = 0;\r\n    }\r\n    return Forex(new_graph,0);\r\n}"]},"metadata":{},"sourceType":"module"}