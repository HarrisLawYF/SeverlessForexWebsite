{"ast":null,"code":"import \"source-map-support/register\";\n\n//import { getCurrencyRates } from \"../libs/currency-data\";\n//const parallel = require(\"map-parallel\");\nvar async = require(\"async\"); //const os = require(\"os\");\n\n\nexport async function calculateMaximumProfit(body) {\n  const promise = new Promise(function (resolve, reject) {\n    var result = generateCurrencyGraph(body);\n\n    if (result != null) {\n      resolve(result);\n    } else {\n      reject(\"Maximum profit not calculated\");\n    }\n  });\n  return promise;\n}\nvar min = -9999999; //This is like a virtual class\n\n/*var edge = {\r\n    id: 0,\r\n    src_bank: 0,\r\n    dest_bank: 0,\r\n    rate: 0,\r\n    extra_cost: 0\r\n};*/\n\nvar graph = {\n  edges: [],\n  banks: 0,\n  rates: 0,\n  create: function () {\n    for (var i = 0; i < this.rates; i++) {\n      // Initialize the graph with empty nodes\n      var new_edge = {\n        src_bank: 0,\n        dest_bank: 0\n      };\n      this.edges.push(new_edge);\n    }\n\n    return this;\n  }\n};\n\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost) {\n  var result = local_currency * rate;\n  result = result * ((100 - extra_cost) / 100);\n  return result;\n}\n\nfunction Forex(graph, src_bank) {\n  var V = graph.banks;\n  var E = graph.rates;\n  var dist = [];\n  var bridges = []; // Step 1: Initialize distances from src to all other vertices as INFINITE negative\n\n  for (var z = 0; z < V; ++z) {\n    dist[z] = min;\n    bridges[z] = [src_bank];\n  } //Start with 1 dollar\n\n\n  dist[src_bank] = 1;\n\n  for (var i = 1; i < 10; ++i) {\n    for (var j = 0; j < E; ++j) {\n      var u = graph.edges[j].src_bank;\n      var v = graph.edges[j].dest_bank;\n      var extra_cost = graph.edges[j].extra_cost;\n      var rate = graph.edges[j].rate;\n      var result = calculateMoneyWithCurrencyRate(dist[u], rate, extra_cost);\n\n      if (dist[u] != min && result > dist[v]) {\n        dist[v] = result;\n        var new_route = bridges[u].slice(0);\n        bridges[v] = new_route;\n        bridges[v].push(v);\n      }\n    }\n  } //printArr(dist, bridges, V);\n\n\n  return {\n    dist,\n    bridges\n  };\n} // A utility function used to print the solution\n\n/*function printArr(dist, bridges, V)\r\n{\r\n    console.log(\"Vertex Distance from Source\");\r\n    for (var i = 0; i < V; ++i){\r\n        console.log(i + \"\\t\\t\" + dist[i]);\r\n        console.log(bridges[i]);\r\n        console.log(\"--------------\");\r\n    }\r\n\r\n}*/\n\n\nfunction buildGraph(link, currency, position, callback) {\n  link.id = position;\n  link.src_bank = currency[position].src_id;\n  link.dest_bank = currency[position].dest_id;\n  link.rate = currency[position].rate; //TODO: call API here\n\n  link.extra_cost = 0;\n  return callback(null, link);\n}\n\nasync function generateCurrencyGraph(data) {\n  var new_graph = {\n    edges: [],\n    banks: data.total_currencies,\n    rates: data.total_rates\n  };\n  new_graph = graph.create.call(new_graph);\n  async.map(new_graph.edges, function (edge, callback) {\n    buildGraph(edge, data.currencies, new_graph.edges.indexOf(edge), callback);\n  }, function (err, results) {\n    if (err) {\n      console.log(err);\n    }\n\n    new_graph.edges = results;\n    console.log(new_graph);\n    return Forex(new_graph, 0);\n  });\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\libs\\bellman-ford-lib.js"],"names":["async","require","calculateMaximumProfit","body","promise","Promise","resolve","reject","result","generateCurrencyGraph","min","graph","edges","banks","rates","create","i","new_edge","src_bank","dest_bank","push","calculateMoneyWithCurrencyRate","local_currency","rate","extra_cost","Forex","V","E","dist","bridges","z","j","u","v","new_route","slice","buildGraph","link","currency","position","callback","id","src_id","dest_id","data","new_graph","total_currencies","total_rates","call","map","edge","currencies","indexOf","err","results","console","log"],"mappings":"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","sourcesContent":["//import { getCurrencyRates } from \"../libs/currency-data\";\r\n//const parallel = require(\"map-parallel\");\r\nvar async = require(\"async\");\r\n//const os = require(\"os\");\r\n\r\nexport async function calculateMaximumProfit(body) {\r\n    const promise = new Promise(function(resolve, reject) {\r\n        var result = generateCurrencyGraph(body);\r\n        if(result!=null){\r\n            resolve(result);\r\n        } else{\r\n            reject(\"Maximum profit not calculated\");\r\n        }\r\n    });\r\n    return promise;\r\n}\r\n\r\n\r\nvar min = -9999999;\r\n\r\n//This is like a virtual class\r\n/*var edge = {\r\n    id: 0,\r\n    src_bank: 0,\r\n    dest_bank: 0,\r\n    rate: 0,\r\n    extra_cost: 0\r\n};*/\r\n\r\nvar graph = {\r\n    edges:[],\r\n    banks: 0,\r\n    rates: 0,\r\n    create: function(){\r\n        for (var i = 0; i < this.rates; i++) {\r\n            // Initialize the graph with empty nodes\r\n            var new_edge = {src_bank:0,dest_bank:0};\r\n            this.edges.push(new_edge);\r\n        }\r\n        return this;\r\n    },\r\n};\r\n\r\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost){\r\n    var result = local_currency * rate;\r\n    result = result*((100-extra_cost)/100);\r\n    return result;\r\n}\r\n\r\nfunction Forex(graph, src_bank)\r\n{\r\n    var V = graph.banks;\r\n    var E = graph.rates;\r\n    var dist = [];\r\n    var bridges = [];\r\n\r\n    // Step 1: Initialize distances from src to all other vertices as INFINITE negative\r\n    for (var z = 0; z < V; ++z){\r\n        dist[z] = min;\r\n        bridges[z] = [src_bank];\r\n    }\r\n\r\n    //Start with 1 dollar\r\n    dist[src_bank] = 1;\r\n\r\n    for (var i = 1; i < 10; ++i) {\r\n        for (var j = 0; j < E; ++j) {\r\n            var u = graph.edges[j].src_bank;\r\n            var v = graph.edges[j].dest_bank;\r\n            var extra_cost = graph.edges[j].extra_cost;\r\n            var rate = graph.edges[j].rate;\r\n            var result = calculateMoneyWithCurrencyRate(dist[u],rate,extra_cost);\r\n            if (dist[u] != min && result > dist[v]){\r\n                dist[v] = result;\r\n                var new_route = bridges[u].slice(0);\r\n                bridges[v] = new_route;\r\n                bridges[v].push(v);\r\n            }\r\n        }\r\n    }\r\n    //printArr(dist, bridges, V);\r\n    return {dist, bridges};\r\n}\r\n\r\n// A utility function used to print the solution\r\n/*function printArr(dist, bridges, V)\r\n{\r\n    console.log(\"Vertex Distance from Source\");\r\n    for (var i = 0; i < V; ++i){\r\n        console.log(i + \"\\t\\t\" + dist[i]);\r\n        console.log(bridges[i]);\r\n        console.log(\"--------------\");\r\n    }\r\n\r\n}*/\r\n\r\nfunction buildGraph(link,currency,position,callback){\r\n    link.id = position;\r\n    link.src_bank = currency[position].src_id;\r\n    link.dest_bank = currency[position].dest_id;\r\n    link.rate = currency[position].rate; //TODO: call API here\r\n    link.extra_cost = 0;\r\n\r\n    return callback(null,link);\r\n}\r\n\r\nasync function generateCurrencyGraph(data){\r\n    var new_graph = {edges:[],banks:data.total_currencies,rates:data.total_rates};\r\n    new_graph = graph.create.call(new_graph);\r\n    async.map(new_graph.edges, function(edge, callback) {\r\n        buildGraph(edge,data.currencies,new_graph.edges.indexOf(edge),callback);\r\n    }, function (err, results) {\r\n        if (err){\r\n            console.log(err);\r\n        }\r\n        new_graph.edges = results;\r\n        console.log(new_graph);\r\n        return Forex(new_graph,0);\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}