{"ast":null,"code":"import \"source-map-support/register\";\n\nconst AWS = require('aws-sdk'); // --------------- TCI Service Descriptor -----------------------\n// define target API as service\n\n\nconst service = new AWS.Service({\n  // TIBCO Cloud Integration base API URL,\n  // can be even more secured using TIBCO Mashery.\n  endpoint: \"http://www.apilayer.net/api/live?access_key=b8a4623a8242a95af6656e49d24b30e8&currencies=USD,AUD,SGD,MYR\",\n  //TODO: use this endpoint instead: https://apilayer.net/api/convert?from=EUR&to=GBP&amount=1\n  convertResponseTypes: false,\n  // TCI Flogo API REST\n  apiConfig: {\n    metadata: {\n      protocol: 'rest-json' // API is JSON-based\n\n    },\n    operations: {\n      // TCI Flogo custom Endpoint\n      // get Data by a record id\n      getData: {\n        http: {\n          method: 'GET',\n          requestUri: ''\n        },\n        input: {\n          type: 'structure',\n          required: []\n        }\n      }\n    }\n  }\n});\nexport async function getCurrencyRates() {\n  const promise = new Promise(function (resolve, reject) {\n    service.isGlobalEndpoint = true;\n    service.getData({}, (err, data) => {\n      console.log(\"triggered\");\n\n      if (err) {\n        console.error(':>> operation error:', err);\n        reject(err);\n      }\n\n      console.log(\"done\");\n      resolve(data);\n    });\n  });\n  return promise;\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\libs\\currency-data.js"],"names":["AWS","require","service","Service","endpoint","convertResponseTypes","apiConfig","metadata","protocol","operations","getData","http","method","requestUri","input","type","required","getCurrencyRates","promise","Promise","resolve","reject","isGlobalEndpoint","err","data","console","log","error"],"mappings":";;AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAnB,C,CACA;AACA;;;AACA,MAAMC,OAAO,GAAG,IAAIF,GAAG,CAACG,OAAR,CAAgB;AAC5B;AACA;AACAC,EAAAA,QAAQ,EAAE,yGAHkB;AAI5B;AACAC,EAAAA,oBAAoB,EAAE,KALM;AAO5B;AACAC,EAAAA,SAAS,EAAE;AACPC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,QAAQ,EAAE,WADJ,CACgB;;AADhB,KADH;AAIPC,IAAAA,UAAU,EAAE;AAER;AACA;AACAC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAE;AACFC,UAAAA,MAAM,EAAE,KADN;AAEFC,UAAAA,UAAU,EAAE;AAFV,SADD;AAKLC,QAAAA,KAAK,EAAE;AACHC,UAAAA,IAAI,EAAE,WADH;AAEHC,UAAAA,QAAQ,EAAE;AAFP;AALF;AAJD;AAJL;AARiB,CAAhB,CAAhB;AA+BA,OAAO,eAAeC,gBAAf,GAAkC;AACrC,QAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAClDnB,IAAAA,OAAO,CAACoB,gBAAR,GAA2B,IAA3B;AACApB,IAAAA,OAAO,CAACQ,OAAR,CAAgB,EAAhB,EAAoB,CAACa,GAAD,EAAMC,IAAN,KAAe;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;;AACA,UAAIH,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACE,KAAR,CAAc,sBAAd,EAAsCJ,GAAtC;AACAF,QAAAA,MAAM,CAACE,GAAD,CAAN;AACH;;AACDE,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACAN,MAAAA,OAAO,CAACI,IAAD,CAAP;AACH,KARD;AASH,GAXe,CAAhB;AAYA,SAAON,OAAP;AACH","sourcesContent":["const AWS = require('aws-sdk');\r\n// --------------- TCI Service Descriptor -----------------------\r\n// define target API as service\r\nconst service = new AWS.Service({\r\n    // TIBCO Cloud Integration base API URL,\r\n    // can be even more secured using TIBCO Mashery.\r\n    endpoint: \"http://www.apilayer.net/api/live?access_key=b8a4623a8242a95af6656e49d24b30e8&currencies=USD,AUD,SGD,MYR\",\r\n    //TODO: use this endpoint instead: https://apilayer.net/api/convert?from=EUR&to=GBP&amount=1\r\n    convertResponseTypes: false,\r\n\r\n    // TCI Flogo API REST\r\n    apiConfig: {\r\n        metadata: {\r\n            protocol: 'rest-json' // API is JSON-based\r\n        },\r\n        operations: {\r\n\r\n            // TCI Flogo custom Endpoint\r\n            // get Data by a record id\r\n            getData: {\r\n                http: {\r\n                    method: 'GET',\r\n                    requestUri: ''\r\n                },\r\n                input: {\r\n                    type: 'structure',\r\n                    required: [ ]\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\n\r\nexport async function getCurrencyRates() {\r\n    const promise = new Promise(function(resolve, reject) {\r\n        service.isGlobalEndpoint = true;\r\n        service.getData({}, (err, data) => {\r\n            console.log(\"triggered\");\r\n            if (err) {\r\n                console.error(':>> operation error:', err);\r\n                reject(err);\r\n            }\r\n            console.log(\"done\");\r\n            resolve(data);\r\n        });\r\n    });\r\n    return promise;\r\n}"]},"metadata":{},"sourceType":"module"}