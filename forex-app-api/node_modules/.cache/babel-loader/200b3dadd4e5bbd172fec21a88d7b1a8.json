{"ast":null,"code":"import \"source-map-support/register\";\nimport { success, failure } from \"../libs/response-lib\";\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\nexport async function main(event, content, callback) {\n  const data = JSON.parse(event.body);\n\n  try {\n    //TODO: call currency API\n    var new_graph = {\n      edges: [],\n      banks: 3,\n      rates: 6\n    }; // add edge 0-1 (or EUR-USD in above figure)\n\n    new_graph.edges[0].src_id = 0;\n    new_graph.edges[0].dest_id = 1;\n    new_graph.edges[0].rate = 1.1076; // add edge 0-2 (or EUR-JPY in above figure)\n\n    new_graph.edges[1].src_id = 0;\n    new_graph.edges[1].dest_id = 2;\n    new_graph.edges[1].rate = 117.79; // add edge 1-2 (or USD-JPY in above figure)\n\n    new_graph.edges[2].src_id = 1;\n    new_graph.edges[2].dest_id = 2;\n    new_graph.edges[2].rate = 106.3471; // add edge 1-3 (or USD-EUR in above figure)\n\n    new_graph.edges[3].src_id = 1;\n    new_graph.edges[3].dest_id = 0;\n    new_graph.edges[3].rate = 0.9029; // add edge 1-4 (or JPY-USD in above figure)\n\n    new_graph.edges[4].src_id = 2;\n    new_graph.edges[4].dest_id = 1;\n    new_graph.edges[4].rate = 0.0094; // add edge 3-2 (or JPY-EUR in above figure)\n\n    new_graph.edges[5].src_id = 2;\n    new_graph.edges[5].dest_id = 0;\n    new_graph.edges[5].rate = 0.0085;\n    var body = {};\n    body.total_currencies = 3;\n    body.total_rates = 6;\n    body.currencies = [];\n\n    for (var i = 0; i < 6; i++) {\n      var currency = {};\n      currency = new_graph.edges[i];\n      body.currencies.push(currency);\n    }\n\n    console.log(body); //var result = await calculateMaximumProfit(body);\n\n    return success(body);\n  } catch (e) {\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\events\\get.js"],"names":["success","failure","calculateMaximumProfit","main","event","content","callback","data","JSON","parse","body","new_graph","edges","banks","rates","src_id","dest_id","rate","total_currencies","total_rates","currencies","i","currency","push","console","log","e","status"],"mappings":"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","sourcesContent":["import { success, failure } from \"../libs/response-lib\";\r\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\r\nexport async function main(event, content, callback){\r\n    const data = JSON.parse(event.body);\r\n\r\n\r\n    try{\r\n        //TODO: call currency API\r\n\r\n        var new_graph = {edges:[],banks:3,rates:6};\r\n\r\n        // add edge 0-1 (or EUR-USD in above figure)\r\n        new_graph.edges[0].src_id = 0;\r\n        new_graph.edges[0].dest_id = 1;\r\n        new_graph.edges[0].rate = 1.1076;\r\n\r\n        // add edge 0-2 (or EUR-JPY in above figure)\r\n        new_graph.edges[1].src_id = 0;\r\n        new_graph.edges[1].dest_id = 2;\r\n        new_graph.edges[1].rate = 117.79;\r\n\r\n        // add edge 1-2 (or USD-JPY in above figure)\r\n        new_graph.edges[2].src_id = 1;\r\n        new_graph.edges[2].dest_id = 2;\r\n        new_graph.edges[2].rate = 106.3471;\r\n\r\n        // add edge 1-3 (or USD-EUR in above figure)\r\n        new_graph.edges[3].src_id = 1;\r\n        new_graph.edges[3].dest_id = 0;\r\n        new_graph.edges[3].rate = 0.9029;\r\n\r\n        // add edge 1-4 (or JPY-USD in above figure)\r\n        new_graph.edges[4].src_id = 2;\r\n        new_graph.edges[4].dest_id = 1;\r\n        new_graph.edges[4].rate = 0.0094;\r\n\r\n        // add edge 3-2 (or JPY-EUR in above figure)\r\n        new_graph.edges[5].src_id = 2;\r\n        new_graph.edges[5].dest_id = 0;\r\n        new_graph.edges[5].rate = 0.0085;\r\n\r\n        var body = {};\r\n\r\n        body.total_currencies = 3;\r\n        body.total_rates = 6;\r\n        body.currencies = [];\r\n        for(var i =0; i < 6; i++){\r\n            var currency = {};\r\n            currency = new_graph.edges[i];\r\n            body.currencies.push(currency);\r\n        }\r\n        console.log(body);\r\n        //var result = await calculateMaximumProfit(body);\r\n        return success(body);\r\n    } catch (e){\r\n        return failure({status:false});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}