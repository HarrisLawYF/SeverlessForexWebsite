{"ast":null,"code":"import \"source-map-support/register\";\nexport async function calculateMaximumProfit(body) {\n  /*const promise = new Promise(function(resolve, reject) {\r\n      var result = buildCurrencyGraph(body);\r\n      if(result.length > 0){\r\n          resolve(result);\r\n      } else{\r\n          reject(\"Maximum profit not calculated\");\r\n      }\r\n  });*/\n  return buildCurrencyGraph(body);\n}\nvar min = -9999999; //This is like a virtual class\n\n/*var edge = {\r\n    id: 0,\r\n    src_bank: 0,\r\n    dest_bank: 0,\r\n    rate: 0,\r\n    extra_cost: 0\r\n};*/\n\nvar graph = {\n  edges: [],\n  banks: 0,\n  rates: 0,\n  create: function () {\n    for (var i = 0; i < this.rates; i++) {\n      // Initialize the graph with empty nodes\n      var new_edge = {\n        src_bank: 0,\n        dest_bank: 0\n      };\n      this.edges.push(new_edge);\n    }\n\n    return this;\n  }\n};\n\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost) {\n  var result = local_currency * rate;\n  result = result * ((100 - extra_cost) / 100);\n  return result;\n}\n\nfunction Forex(graph, src_bank) {\n  var V = graph.banks;\n  var E = graph.rates;\n  var dist = [];\n  var bridges = []; // Step 1: Initialize distances from src to all other vertices as INFINITE negative\n\n  for (var z = 0; z < V; ++z) {\n    dist[z] = min;\n    bridges[z] = [src_bank];\n  } //Start with 1 dollar\n\n\n  dist[src_bank] = 1;\n\n  for (var i = 1; i < 10; ++i) {\n    for (var j = 0; j < E; ++j) {\n      var u = graph.edges[j].src_bank;\n      var v = graph.edges[j].dest_bank;\n      var extra_cost = graph.edges[j].extra_cost;\n      var rate = graph.edges[j].rate;\n      var result = calculateMoneyWithCurrencyRate(dist[u], rate, extra_cost);\n\n      if (dist[u] != min && result > dist[v]) {\n        dist[v] = result;\n        var new_route = bridges[u].slice(0);\n        bridges[v] = new_route;\n        bridges[v].push(v);\n      }\n    }\n  }\n\n  printArr(dist, bridges, V);\n  return {\n    dist,\n    bridges\n  };\n} // A utility function used to print the solution\n\n\nfunction printArr(dist, bridges, V) {\n  console.log(\"Vertex Distance from Source\");\n\n  for (var i = 0; i < V; ++i) {\n    console.log(i + \"\\t\\t\" + dist[i]);\n    console.log(bridges[i]);\n    console.log(\"--------------\");\n  }\n}\n\nfunction buildCurrencyGraph(data) {\n  var new_graph = {\n    edges: [],\n    banks: data.total_currencies,\n    rates: data.total_rates\n  };\n  new_graph = graph.create.call(new_graph);\n\n  for (var count = 0; count < data.total_rates; count++) {\n    new_graph.edges[count].id = count;\n    new_graph.edges[count].src_bank = data.currencies[count].src_id;\n    new_graph.edges[count].dest_bank = data.currencies[count].dest_id;\n    new_graph.edges[count].rate = data.currencies[count].rate;\n    new_graph.edges[count].extra_cost = 0;\n  }\n\n  return Forex(new_graph, 0);\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\libs\\bellman-ford-lib.js"],"names":["calculateMaximumProfit","body","buildCurrencyGraph","min","graph","edges","banks","rates","create","i","new_edge","src_bank","dest_bank","push","calculateMoneyWithCurrencyRate","local_currency","rate","extra_cost","result","Forex","V","E","dist","bridges","z","j","u","v","new_route","slice","printArr","console","log","data","new_graph","total_currencies","total_rates","call","count","id","currencies","src_id","dest_id"],"mappings":"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","sourcesContent":["export async function calculateMaximumProfit(body) {\r\n    /*const promise = new Promise(function(resolve, reject) {\r\n        var result = buildCurrencyGraph(body);\r\n        if(result.length > 0){\r\n            resolve(result);\r\n        } else{\r\n            reject(\"Maximum profit not calculated\");\r\n        }\r\n    });*/\r\n    return buildCurrencyGraph(body);\r\n}\r\n\r\n\r\nvar min = -9999999;\r\n\r\n//This is like a virtual class\r\n/*var edge = {\r\n    id: 0,\r\n    src_bank: 0,\r\n    dest_bank: 0,\r\n    rate: 0,\r\n    extra_cost: 0\r\n};*/\r\n\r\nvar graph = {\r\n    edges:[],\r\n    banks: 0,\r\n    rates: 0,\r\n    create: function(){\r\n        for (var i = 0; i < this.rates; i++) {\r\n            // Initialize the graph with empty nodes\r\n            var new_edge = {src_bank:0,dest_bank:0};\r\n            this.edges.push(new_edge);\r\n        }\r\n        return this;\r\n    },\r\n};\r\n\r\nfunction calculateMoneyWithCurrencyRate(local_currency, rate, extra_cost){\r\n    var result = local_currency * rate;\r\n    result = result*((100-extra_cost)/100);\r\n    return result;\r\n}\r\n\r\nfunction Forex(graph, src_bank)\r\n{\r\n    var V = graph.banks;\r\n    var E = graph.rates;\r\n    var dist = [];\r\n    var bridges = [];\r\n\r\n    // Step 1: Initialize distances from src to all other vertices as INFINITE negative\r\n    for (var z = 0; z < V; ++z){\r\n        dist[z] = min;\r\n        bridges[z] = [src_bank];\r\n    }\r\n\r\n    //Start with 1 dollar\r\n    dist[src_bank] = 1;\r\n\r\n    for (var i = 1; i < 10; ++i) {\r\n        for (var j = 0; j < E; ++j) {\r\n            var u = graph.edges[j].src_bank;\r\n            var v = graph.edges[j].dest_bank;\r\n            var extra_cost = graph.edges[j].extra_cost;\r\n            var rate = graph.edges[j].rate;\r\n            var result = calculateMoneyWithCurrencyRate(dist[u],rate,extra_cost);\r\n            if (dist[u] != min && result > dist[v]){\r\n                dist[v] = result;\r\n                var new_route = bridges[u].slice(0);\r\n                bridges[v] = new_route;\r\n                bridges[v].push(v);\r\n            }\r\n        }\r\n    }\r\n    printArr(dist, bridges, V);\r\n    return {dist, bridges};\r\n}\r\n\r\n// A utility function used to print the solution\r\nfunction printArr(dist, bridges, V)\r\n{\r\n    console.log(\"Vertex Distance from Source\");\r\n    for (var i = 0; i < V; ++i){\r\n        console.log(i + \"\\t\\t\" + dist[i]);\r\n        console.log(bridges[i]);\r\n        console.log(\"--------------\");\r\n    }\r\n\r\n}\r\n\r\nfunction buildCurrencyGraph(data){\r\n    var new_graph = {edges:[],banks:data.total_currencies,rates:data.total_rates};\r\n    new_graph = graph.create.call(new_graph);\r\n    for(var count = 0; count < data.total_rates; count++){\r\n        new_graph.edges[count].id = count;\r\n        new_graph.edges[count].src_bank = data.currencies[count].src_id;\r\n        new_graph.edges[count].dest_bank = data.currencies[count].dest_id;\r\n        new_graph.edges[count].rate = data.currencies[count].rate;\r\n        new_graph.edges[count].extra_cost = 0;\r\n    }\r\n    return Forex(new_graph,0);\r\n}"]},"metadata":{},"sourceType":"module"}