{"ast":null,"code":"import \"source-map-support/register\";\nimport { success, failure } from \"../libs/response-lib\";\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\nexport async function main(event, content, callback) {\n  //const data = JSON.parse(event.body);\n  try {\n    //TODO: call currency API\n    var graph = {\n      edges: [],\n      banks: 0,\n      rates: 0,\n      create: function () {\n        for (var i = 0; i < this.rates; i++) {\n          // Initialize the graph with empty nodes\n          var new_edge = {\n            src_bank: 0,\n            dest_bank: 0\n          };\n          this.edges.push(new_edge);\n        }\n\n        return this;\n      }\n    };\n    var new_graph = {\n      edges: [],\n      banks: 3,\n      rates: 6\n    };\n    new_graph = graph.create.call(new_graph); // add edge 0-1 (or EUR-USD in above figure)\n\n    new_graph.edges[0].src_id = 0;\n    new_graph.edges[0].dest_id = 1;\n    new_graph.edges[0].rate = 1.1076; // add edge 0-2 (or EUR-JPY in above figure)\n\n    new_graph.edges[1].src_id = 0;\n    new_graph.edges[1].dest_id = 2;\n    new_graph.edges[1].rate = 117.79; // add edge 1-2 (or USD-JPY in above figure)\n\n    new_graph.edges[2].src_id = 1;\n    new_graph.edges[2].dest_id = 2;\n    new_graph.edges[2].rate = 106.3471; // add edge 1-3 (or USD-EUR in above figure)\n\n    new_graph.edges[3].src_id = 1;\n    new_graph.edges[3].dest_id = 0;\n    new_graph.edges[3].rate = 0.9029; // add edge 1-4 (or JPY-USD in above figure)\n\n    new_graph.edges[4].src_id = 2;\n    new_graph.edges[4].dest_id = 1;\n    new_graph.edges[4].rate = 0.0094; // add edge 3-2 (or JPY-EUR in above figure)\n\n    new_graph.edges[5].src_id = 2;\n    new_graph.edges[5].dest_id = 0;\n    new_graph.edges[5].rate = 0.0085;\n    var body = {};\n    body.total_currencies = 3;\n    body.total_rates = 6;\n    body.currencies = [];\n\n    for (var i = 0; i < 6; i++) {\n      var currency = {};\n      currency = new_graph.edges[i];\n      body.currencies.push(currency);\n    }\n\n    var result = await calculateMaximumProfit(body);\n    return success(result);\n  } catch (e) {\n    console.log(e);\n    return failure({\n      status: false\n    });\n  }\n}","map":{"version":3,"sources":["D:\\Users\\Harris\\Desktop\\Projects\\forex-website\\forex-app-api\\events\\get.js"],"names":["success","failure","calculateMaximumProfit","main","event","content","callback","graph","edges","banks","rates","create","i","new_edge","src_bank","dest_bank","push","new_graph","call","src_id","dest_id","rate","body","total_currencies","total_rates","currencies","currency","result","e","console","log","status"],"mappings":"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","sourcesContent":["import { success, failure } from \"../libs/response-lib\";\r\nimport { calculateMaximumProfit } from \"../libs/bellman-ford-lib\";\r\nexport async function main(event, content, callback){\r\n    //const data = JSON.parse(event.body);\r\n\r\n\r\n    try{\r\n        //TODO: call currency API\r\n        var graph = {\r\n            edges:[],\r\n            banks: 0,\r\n            rates: 0,\r\n            create: function(){\r\n                for (var i = 0; i < this.rates; i++) {\r\n                    // Initialize the graph with empty nodes\r\n                    var new_edge = {src_bank:0,dest_bank:0};\r\n                    this.edges.push(new_edge);\r\n                }\r\n                return this;\r\n            },\r\n        };\r\n        var new_graph = {edges:[],banks:3,rates:6};\r\n        new_graph = graph.create.call(new_graph);\r\n        // add edge 0-1 (or EUR-USD in above figure)\r\n        new_graph.edges[0].src_id = 0;\r\n        new_graph.edges[0].dest_id = 1;\r\n        new_graph.edges[0].rate = 1.1076;\r\n\r\n        // add edge 0-2 (or EUR-JPY in above figure)\r\n        new_graph.edges[1].src_id = 0;\r\n        new_graph.edges[1].dest_id = 2;\r\n        new_graph.edges[1].rate = 117.79;\r\n\r\n        // add edge 1-2 (or USD-JPY in above figure)\r\n        new_graph.edges[2].src_id = 1;\r\n        new_graph.edges[2].dest_id = 2;\r\n        new_graph.edges[2].rate = 106.3471;\r\n\r\n        // add edge 1-3 (or USD-EUR in above figure)\r\n        new_graph.edges[3].src_id = 1;\r\n        new_graph.edges[3].dest_id = 0;\r\n        new_graph.edges[3].rate = 0.9029;\r\n\r\n        // add edge 1-4 (or JPY-USD in above figure)\r\n        new_graph.edges[4].src_id = 2;\r\n        new_graph.edges[4].dest_id = 1;\r\n        new_graph.edges[4].rate = 0.0094;\r\n\r\n        // add edge 3-2 (or JPY-EUR in above figure)\r\n        new_graph.edges[5].src_id = 2;\r\n        new_graph.edges[5].dest_id = 0;\r\n        new_graph.edges[5].rate = 0.0085;\r\n\r\n        var body = {};\r\n\r\n        body.total_currencies = 3;\r\n        body.total_rates = 6;\r\n        body.currencies = [];\r\n        for(var i =0; i < 6; i++){\r\n            var currency = {};\r\n            currency = new_graph.edges[i];\r\n            body.currencies.push(currency);\r\n        }\r\n        var result = await calculateMaximumProfit(body);\r\n        return success(result);\r\n    } catch (e){\r\n        console.log(e);\r\n        return failure({status:false});\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}